valores <- c(1,2,3,4,5)
assign("notas", c(11,14,09,20))
valores[1]
valores[2]
notas[notas >14]
notas[x>11
]
notas[notas>=11]
seq(1,10)
valores[0]
valores[1]
notas[0]
rep(1, 10)
rep(notas, 2)
rep(seq(5), 3) # tambien se puede repetir secuencias
any(notas>11)
all(notas>11)
all(notas>=11) # no
a= c(1,5,6, NULL)
mean(a)
# Los valores NA no permiten sacar ciertos cálculos estadísticos como la media: mean()
notas_na<- c(notas, NA)
mean(notas_na )
mean(notas_na, na.rm = "1")
mean(notas_na, na.rm = "T")
mean(notas_na, na.rm = "True")
test<- c(1,2,4,5,NULL)
mean(test)
test<- c(1,2,4,5,NULL, NULL, NULL)
mean(test)
remove(test)
# se puede operar cuando existe NULL y no lo cuenta como un objeto mas:
notas_null<- (notas, NULL, NULL) #AGREGAMOS 2 NULL Y LA MEDIA NO VARÍA
# se puede operar cuando existe NULL y no lo cuenta como un objeto mas:
notas_null<- c(notas, NULL, NULL) #AGREGAMOS 2 NULL Y LA MEDIA NO VARÍA
notas_null
x= c(1,2,3, NULL, NULL)
X
x
remove(x)
mean(notas)
mean(notas_null)
# FILTROS and SUBSET()
# Filtros:
notas_aprobadas<- notas[notas>=11]
notas_aprobadas
# SUBSET(): Sirve como un filtro pero elimina automáticamente los NA
subset(notas_na, notas_na>=11)
a
which(notas>=11)
which(notas>=11) # Arroja los índices del vector que cumplen la condición
ifelse(notas>=11, "aprobado")
ifelse(notas>=11, print("aprobado"))
ifelse(any(notas>=11), "Hay aprobados")
ifelse(any(notas>=11), "Hay aprobados", "Todos están jalados") # :: [1] "Hay aprobados"
ifelse(notas>=11, "aprobado", "jalado")
ifelse(notas>=11, notas, "jalado")
?sort()
sort(notas)
sort(notas, decreasing = True)
sort(notas, decreasing = TRUE)
?names()
frutas <- c("manzana", "plátano", "uva")
names(precios) <- frutas
frutas <- c("manzana", "plátano", "uva")
precios <- c(1,1.5, 3)
names(precios) <- frutas
names(precios) <- frutas
precios
