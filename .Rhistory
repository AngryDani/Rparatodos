valores <- c(1,2,3,4,5)
assign("notas", c(11,14,09,20))
valores[1]
valores[2]
notas[notas >14]
notas[x>11
]
notas[notas>=11]
seq(1,10)
valores[0]
valores[1]
notas[0]
rep(1, 10)
rep(notas, 2)
rep(seq(5), 3) # tambien se puede repetir secuencias
any(notas>11)
all(notas>11)
all(notas>=11) # no
a= c(1,5,6, NULL)
mean(a)
# Los valores NA no permiten sacar ciertos cálculos estadísticos como la media: mean()
notas_na<- c(notas, NA)
mean(notas_na )
mean(notas_na, na.rm = "1")
mean(notas_na, na.rm = "T")
mean(notas_na, na.rm = "True")
test<- c(1,2,4,5,NULL)
mean(test)
test<- c(1,2,4,5,NULL, NULL, NULL)
mean(test)
remove(test)
# se puede operar cuando existe NULL y no lo cuenta como un objeto mas:
notas_null<- (notas, NULL, NULL) #AGREGAMOS 2 NULL Y LA MEDIA NO VARÍA
# se puede operar cuando existe NULL y no lo cuenta como un objeto mas:
notas_null<- c(notas, NULL, NULL) #AGREGAMOS 2 NULL Y LA MEDIA NO VARÍA
notas_null
x= c(1,2,3, NULL, NULL)
X
x
remove(x)
mean(notas)
mean(notas_null)
# FILTROS and SUBSET()
# Filtros:
notas_aprobadas<- notas[notas>=11]
notas_aprobadas
# SUBSET(): Sirve como un filtro pero elimina automáticamente los NA
subset(notas_na, notas_na>=11)
a
which(notas>=11)
which(notas>=11) # Arroja los índices del vector que cumplen la condición
ifelse(notas>=11, "aprobado")
ifelse(notas>=11, print("aprobado"))
ifelse(any(notas>=11), "Hay aprobados")
ifelse(any(notas>=11), "Hay aprobados", "Todos están jalados") # :: [1] "Hay aprobados"
ifelse(notas>=11, "aprobado", "jalado")
ifelse(notas>=11, notas, "jalado")
?sort()
sort(notas)
sort(notas, decreasing = True)
sort(notas, decreasing = TRUE)
?names()
frutas <- c("manzana", "plátano", "uva")
names(precios) <- frutas
frutas <- c("manzana", "plátano", "uva")
precios <- c(1,1.5, 3)
names(precios) <- frutas
names(precios) <- frutas
precios
a
del(a)
dell(a)
x<- c(1:12)
notas
valores
# DIM()
dim(x) <- c(3,2)
# DIM()
dim(x) <- c(4,3)
x
length(notas)
del(x)
dell(x)
rm(a)
notas_update<- c(notas, 20, 11, 3, 8, 19)
length(notas_update)
notas_update<- c(notas, 20, 11, 3, 8, 19, 16)
length(notas_update)
m_notas<- matrix(data=notas_update, nrow = 5, ncol = 2)
m_notas<- matrix(data=notas_update, nrow = 5, ncol = 2)
m_notas
m_notas<- matrix(data=notas_update, nrow = 5, ncol = 2, byrow= TRUE)
m_notas
m_notas[1,2]
m_notas
m_notas[4,1] <- 9
m_notas
rownames(m_notas)<- c("Angry", "Dan", "Fuji", "Pepito", "YonoFui")
m_notas
RM(X)
rm(x)
usuarios <- c("AngryDani", "Oggy2000", "Sherlock", "Desconocido")
usuarios_factor <- as.factor(usuarios)
usuarios <- c("AngryDani", "Oggy2000", "Sherlock", "Desconocido", "AngryDani", "Sherlock", "Desconocido",
"Sherlock", "Sherlock")
# Convertir el vector en factor::
usuarios_factor <- as.factor(usuarios)
usuarios_factor
# Para contabilizar los elementos repetidos usamos TABLE()
table(usuarios_factor)
usuarios_total<- c("AngryDani", "Oggy2000", "Sherlock", "Desconocido", "asd123",
"JJDW", "OwO--")
premios_usuarios<- factor(usuarios, levels = usuarios_factor)
premios_usuarios
premios_usuarios<- factor(usuarios, levels = usuarios_factor)
premios_usuarios<- factor(usuarios, levels = usuarios_total)
premios_usuarios
table(premios_usuarios)
asesinos<- list(nombres= c("Damers", "Payasito", "El Sapito"), muertes= c(500, 900, 120))
asesinos
type(asesinos)
# ingresar a los atributos de la lista
asesinos$nombres
# (2da forma)
asesinos[["nombres"]]
gamers= c("Angry", "Dani", "Oggy2000")
victorias= c(5, 3, 13)
fechas= c(2016, 2012, 2008)
gamers_dataframe <- data.frame(gamers,victorias,fechas)
gamers_dataframe
str(gamers_dataframe)
names(gamers_dataframe)
gamers_dataframe$gamers
gamers_dataframe
mean(gamers_dataframe$victorias)
